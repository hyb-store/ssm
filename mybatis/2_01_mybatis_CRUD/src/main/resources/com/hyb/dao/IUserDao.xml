<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hyb.dao.IUserDao">
    <!-- 配置查询所有   -->
    <select id="findAll" resultType="com.hyb.domain.User">
        select * from user
    </select>
    
    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="com.hyb.domain.User">
        <!-- 插入数据后，获取插入数据的id   keyProperty:对应实体类属性名称。keyColumn:对应表的列-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday})
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.hyb.domain.User">
        update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}
    </update>

    <!-- 删除用户 类型为基本类型或者基本类型包装类，占位符只有一个参数时，占位符可以随意写-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{useId}
    </delete>

    <!-- 根据id查询用户 -->
    <select id="findById" resultType="com.hyb.domain.User" parameterType="java.lang.Integer">
        select * from user where id=#{userId}
    </select>

    <!-- 根据姓名模糊查询  select * from user where username like #{userName} 也可以-->
    <select id="findByName" parameterType="String" resultType="com.hyb.domain.User">
         select * from user where username like #{userName}
        <!-- select * from user where username like '%${value}%' -->
    </select>

    <!-- 查询总用户数-->
    <select id="findTotal" resultType="INT">
        select count(id) from user
    </select>

    <!-- 根据queryVo中的条件查询用户-->
    <select id="findUserByVo" parameterType="com.hyb.domain.QueryVo" resultType="com.hyb.domain.User">
        select * from user where username like #{user.username}
    </select>





</mapper>